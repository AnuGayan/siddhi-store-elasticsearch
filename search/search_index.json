{
    "docs": [
        {
            "location": "/", 
            "text": "?Siddhi-store-elasticsearch\n\n\nThe \nsiddhi-store-elasticsearch extension\n is an extension for siddhi Elasticsearch event table implementation. This extension can be used to persist events to a\nElasticsearch server instance of version 6.x.x.\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n1.0.0\n.\n\n\nPrerequisites\n\n\n\n\nElasticsearch can be downloaded directly from href=\"https://www.elastic.co/downloads/elasticsearch\" in zip, tar.gz, deb, or rpm packages. \n\n\nThen install the version 6.2.4, usual Ubuntu way with dpkg.\n   \nsudo apt-get update\n   wget https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/deb/elasticsearch/6.2.4/elasticsearch-6.2.4.deb\n   sudo dpkg -i elasticsearch-6.2.4.deb\n\n   \nHow To Install and Configure Elasticsearch on Ubuntu 16.04\n\n\nAlso you can start the Elasticsearch server using docker image:\n   \ndocker run -p 9600:9200 -p 9700:9300 -e \"discovery.type=single-node\" -e ELASTIC_PASSWORD=MagicWord -d docker.elastic.co/elasticsearch/elasticsearch:6.2.4\n\n\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support. \n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.store.elasticsearch\n/groupId\n\n        \nartifactId\nsiddhi-store-elasticsearch\n/artifactId\n\n        \nversion\nversion\nx.x.x\n/version\n/version\n\n     \n/dependency\n\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nelasticsearch\n \n(Store)\nElasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library.\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n. \n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#siddhi-store-elasticsearch", 
            "text": "The  siddhi-store-elasticsearch extension  is an extension for siddhi Elasticsearch event table implementation. This extension can be used to persist events to a\nElasticsearch server instance of version 6.x.x.  Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "?Siddhi-store-elasticsearch"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  1.0.0 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#prerequisites", 
            "text": "Elasticsearch can be downloaded directly from href=\"https://www.elastic.co/downloads/elasticsearch\" in zip, tar.gz, deb, or rpm packages.   Then install the version 6.2.4, usual Ubuntu way with dpkg.\n    sudo apt-get update\n   wget https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/deb/elasticsearch/6.2.4/elasticsearch-6.2.4.deb\n   sudo dpkg -i elasticsearch-6.2.4.deb \n    How To Install and Configure Elasticsearch on Ubuntu 16.04  Also you can start the Elasticsearch server using docker image:\n    docker run -p 9600:9200 -p 9700:9300 -e \"discovery.type=single-node\" -e ELASTIC_PASSWORD=MagicWord -d docker.elastic.co/elasticsearch/elasticsearch:6.2.4", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.     This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.         dependency \n         groupId org.wso2.extension.siddhi.store.elasticsearch /groupId \n         artifactId siddhi-store-elasticsearch /artifactId \n         version version x.x.x /version /version \n      /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "elasticsearch   (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .     Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.     For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/1.0.0/", 
            "text": "API Docs - v1.0.0\n\n\nStore\n\n\nelasticsearch \n(Store)\n\n\nElasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library.\n\n\n\nSyntax\n\n\n@Store(type=\nelasticsearch\n, host=\nSTRING\n, port=\nINT\n, scheme=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, index.name=\nSTRING\n, index.alias=\nSTRING\n, index.number.of.shards=\nINT\n, index.number.of.replicas=\nINT\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nhost\n\n        \nThe host of the Elasticsearch server.\n\n        \nlocalhost\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nport\n\n        \nThe port of the Elasticsearch server.\n\n        \n9200\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nscheme\n\n        \nThe scheme type of the Elasticsearch server connection.\n\n        \nhttp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe user name for the Elasticsearch server connection.\n\n        \nelastic\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password for the Elasticsearch server connection.\n\n        \nchangeme\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.name\n\n        \nThe name of the Elasticsearch index.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.alias\n\n        \nThe alias of the Elasticsearch index.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.shards\n\n        \nThe number of shards for the index in Elasticsearch server.\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.replicas\n\n        \nThe number of replicas for the index in Elasticsearch server.\n\n        \n2\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nelasticsearch\n, host=\nlocalhost\n, username=\nelastic\n, password=\nchangeme\n , index.name=\nMyStockTable\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an index named \nMyStockTable\n on the Elasticsearch server if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a Elasticsearch index document id is generated for it.", 
            "title": "1.0.0"
        }, 
        {
            "location": "/api/1.0.0/#api-docs-v100", 
            "text": "", 
            "title": "API Docs - v1.0.0"
        }, 
        {
            "location": "/api/1.0.0/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/1.0.0/#elasticsearch-store", 
            "text": "Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library.  Syntax  @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         host \n         The host of the Elasticsearch server. \n         localhost \n         STRING \n         Yes \n         No \n     \n     \n         port \n         The port of the Elasticsearch server. \n         9200 \n         INT \n         Yes \n         No \n     \n     \n         scheme \n         The scheme type of the Elasticsearch server connection. \n         http \n         STRING \n         Yes \n         No \n     \n     \n         username \n         The user name for the Elasticsearch server connection. \n         elastic \n         STRING \n         Yes \n         No \n     \n     \n         password \n         The password for the Elasticsearch server connection. \n         changeme \n         STRING \n         Yes \n         No \n     \n     \n         index.name \n         The name of the Elasticsearch index. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         index.alias \n         The alias of the Elasticsearch index. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         index.number.of.shards \n         The number of shards for the index in Elasticsearch server. \n         3 \n         INT \n         Yes \n         No \n     \n     \n         index.number.of.replicas \n         The number of replicas for the index in Elasticsearch server. \n         2 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme  , index.name= MyStockTable ,field.length= symbol:100 )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  The above example creates an index named  MyStockTable  on the Elasticsearch server if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a Elasticsearch index document id is generated for it.", 
            "title": "elasticsearch (Store)"
        }, 
        {
            "location": "/api/.md/", 
            "text": "", 
            "title": ""
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v1.0.0\n\n\nStore\n\n\nelasticsearch \n(Store)\n\n\nElasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library.\n\n\n\nSyntax\n\n\n@Store(type=\nelasticsearch\n, host=\nSTRING\n, port=\nINT\n, scheme=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, index.name=\nSTRING\n, index.alias=\nSTRING\n, index.number.of.shards=\nINT\n, index.number.of.replicas=\nINT\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nhost\n\n        \nThe host of the Elasticsearch server.\n\n        \nlocalhost\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nport\n\n        \nThe port of the Elasticsearch server.\n\n        \n9200\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nscheme\n\n        \nThe scheme type of the Elasticsearch server connection.\n\n        \nhttp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe user name for the Elasticsearch server connection.\n\n        \nelastic\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password for the Elasticsearch server connection.\n\n        \nchangeme\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.name\n\n        \nThe name of the Elasticsearch index.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.alias\n\n        \nThe alias of the Elasticsearch index.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.shards\n\n        \nThe number of shards for the index in Elasticsearch server.\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.replicas\n\n        \nThe number of replicas for the index in Elasticsearch server.\n\n        \n2\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nelasticsearch\n, host=\nlocalhost\n, username=\nelastic\n, password=\nchangeme\n , index.name=\nMyStockTable\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an index named \nMyStockTable\n on the Elasticsearch server if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a Elasticsearch index document id is generated for it.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v100", 
            "text": "", 
            "title": "API Docs - v1.0.0"
        }, 
        {
            "location": "/api/latest/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/latest/#elasticsearch-store", 
            "text": "Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library.  Syntax  @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         host \n         The host of the Elasticsearch server. \n         localhost \n         STRING \n         Yes \n         No \n     \n     \n         port \n         The port of the Elasticsearch server. \n         9200 \n         INT \n         Yes \n         No \n     \n     \n         scheme \n         The scheme type of the Elasticsearch server connection. \n         http \n         STRING \n         Yes \n         No \n     \n     \n         username \n         The user name for the Elasticsearch server connection. \n         elastic \n         STRING \n         Yes \n         No \n     \n     \n         password \n         The password for the Elasticsearch server connection. \n         changeme \n         STRING \n         Yes \n         No \n     \n     \n         index.name \n         The name of the Elasticsearch index. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         index.alias \n         The alias of the Elasticsearch index. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         index.number.of.shards \n         The number of shards for the index in Elasticsearch server. \n         3 \n         INT \n         Yes \n         No \n     \n     \n         index.number.of.replicas \n         The number of replicas for the index in Elasticsearch server. \n         2 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme  , index.name= MyStockTable ,field.length= symbol:100 )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  The above example creates an index named  MyStockTable  on the Elasticsearch server if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a Elasticsearch index document id is generated for it.", 
            "title": "elasticsearch (Store)"
        }, 
        {
            "location": "/about/license/", 
            "text": "", 
            "title": "License"
        }
    ]
}